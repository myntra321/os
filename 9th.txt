#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_READERS 5
#define NUM_WRITERS 2

int data = 0;
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t rw_mutex = PTHREAD_MUTEX_INITIALIZER;
int readers_count = 0;

void* reader(void* id) {
    int readerID = *(int*)id;

    while (1) {
        pthread_mutex_lock(&rw_mutex);
        if (++readers_count == 1) pthread_mutex_lock(&mutex);
        pthread_mutex_unlock(&rw_mutex);

        printf("Reader %d reads data: %d\n", readerID, data);

        pthread_mutex_lock(&rw_mutex);
        if (--readers_count == 0) pthread_mutex_unlock(&mutex);
        pthread_mutex_unlock(&rw_mutex);

        usleep(1000000);
    }

    return NULL;
}

void* writer(void* id) {
    int writerID = *(int*)id;

    while (1) {
        pthread_mutex_lock(&mutex);
        data = writerID;
        printf("Writer %d writes data: %d\n", writerID, data);
        pthread_mutex_unlock(&mutex);
        usleep(2000000);
    }

    return NULL;
}

int main() {
    pthread_t readers[NUM_READERS];
    pthread_t writers[NUM_WRITERS];
    int readerIDs[NUM_READERS];
    int writerIDs[NUM_WRITERS];

    for (int i = 0; i < NUM_READERS; i++) {
        readerIDs[i] = i;
        pthread_create(&readers[i], NULL, reader, &readerIDs[i]);
    }

    for (int i = 0; i < NUM_WRITERS; i++) {
        writerIDs[i] = i;
        pthread_create(&writers[i], NULL, writer, &writerIDs[i]);
    }

    for (int i = 0; i < NUM_READERS; i++) pthread_join(readers[i], NULL);
    for (int i = 0; i < NUM_WRITERS; i++) pthread_join(writers[i], NULL);

    pthread_mutex_destroy(&mutex);
    pthread_mutex_destroy(&rw_mutex);

    return 0;
}
