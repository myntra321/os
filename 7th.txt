#include <stdio.h>
#include <stdbool.h>

struct Process {
    int id;
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int turnaroundTime;
    int waitingTime;
    bool completed;
};

// Function to find the process with the shortest remaining time
int findShortestJob(struct Process processes[], int n, int currentTime) {
    int shortestJobIndex = -1;
    int shortestJobTime = 99999;

    for (int i = 0; i < n; i++) {
        if (!processes[i].completed && processes[i].arrivalTime <= currentTime) {
            if (processes[i].remainingTime < shortestJobTime) {
                shortestJobTime = processes[i].remainingTime;
                shortestJobIndex = i;
            }
        }
    }

    return shortestJobIndex;
}

// Preemptive Shortest Job First (SJF) Scheduling
void SJFPreemptive(struct Process processes[], int n) {
    int currentTime = 0;
    int completedProcesses = 0;

    while (completedProcesses < n) {
        int shortestJobIndex = findShortestJob(processes, n, currentTime);

        if (shortestJobIndex == -1) {
            currentTime++;
        } else {
            processes[shortestJobIndex].remainingTime--;

            if (processes[shortestJobIndex].remainingTime == 0) {
                completedProcesses++;
                processes[shortestJobIndex].completed = true;
                processes[shortestJobIndex].turnaroundTime = currentTime - processes[shortestJobIndex].arrivalTime;
                processes[shortestJobIndex].waitingTime = processes[shortestJobIndex].turnaroundTime - processes[shortestJobIndex].burstTime;
            }

            currentTime++;
        }
    }

    // Print results
    printf("SJF Preemptive Scheduling:\n");
    printf("Process\tArrival Time\tBurst Time\tTurnaround Time\tWaiting Time\n");

    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrivalTime, processes[i].burstTime, processes[i].turnaroundTime, processes[i].waitingTime);
    }
}

// Round Robin Scheduling
void roundRobin(struct Process processes[], int n, int quantum) {
    int currentTime = 0;
    int completedProcesses = 0;

    while (completedProcesses < n) {
        for (int i = 0; i < n; i++) {
            if (!processes[i].completed && processes[i].arrivalTime <= currentTime) {
                int remainingTime = processes[i].remainingTime;
                if (remainingTime <= quantum) {
                    currentTime += remainingTime;
                    processes[i].remainingTime = 0;
                    processes[i].completed = true;
                    completedProcesses++;
                    processes[i].turnaroundTime = currentTime - processes[i].arrivalTime;
                    processes[i].waitingTime = processes[i].turnaroundTime - processes[i].burstTime;
                } else {
                    currentTime += quantum;
                    processes[i].remainingTime -= quantum;
                }
            }
        }
    }

    // Print results
    printf("\nRound Robin Scheduling (Quantum=%d):\n", quantum);
    printf("Process\tArrival Time\tBurst Time\tTurnaround Time\tWaiting Time\n");

    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrivalTime, processes[i].burstTime, processes[i].turnaroundTime, processes[i].waitingTime);
    }
}

int main() {
    int n, quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
        processes[i].remainingTime = processes[i].burstTime;
        processes[i].completed = false;
    }

    SJFPreemptive(processes, n);

    printf("\nEnter time quantum for Round Robin: ");
    scanf("%d", &quantum);

    for (int i = 0; i < n; i++) {
        processes[i].remainingTime = processes[i].burstTime;
        processes[i].completed = false;
    }

    roundRobin(processes, n, quantum);

    return 0;
}
